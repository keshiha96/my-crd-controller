/*
 * Copyright (c) 2019 WSO2 Inc. (http:www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/wso2-incubator/wso2am-k8s-operator/pkg/apis/apim/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// APIManagerLister helps list APIManagers.
type APIManagerLister interface {
	// List lists all APIManagers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.APIManager, err error)
	// APIManagers returns an object that can list and get APIManagers.
	APIManagers(namespace string) APIManagerNamespaceLister
	APIManagerListerExpansion
}

// aPIManagerLister implements the APIManagerLister interface.
type aPIManagerLister struct {
	indexer cache.Indexer
}

// NewAPIManagerLister returns a new APIManagerLister.
func NewAPIManagerLister(indexer cache.Indexer) APIManagerLister {
	return &aPIManagerLister{indexer: indexer}
}

// List lists all APIManagers in the indexer.
func (s *aPIManagerLister) List(selector labels.Selector) (ret []*v1alpha1.APIManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APIManager))
	})
	return ret, err
}

// APIManagers returns an object that can list and get APIManagers.
func (s *aPIManagerLister) APIManagers(namespace string) APIManagerNamespaceLister {
	return aPIManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// APIManagerNamespaceLister helps list and get APIManagers.
type APIManagerNamespaceLister interface {
	// List lists all APIManagers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.APIManager, err error)
	// Get retrieves the APIManager from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.APIManager, error)
	APIManagerNamespaceListerExpansion
}

// aPIManagerNamespaceLister implements the APIManagerNamespaceLister
// interface.
type aPIManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all APIManagers in the indexer for a given namespace.
func (s aPIManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.APIManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APIManager))
	})
	return ret, err
}

// Get retrieves the APIManager from the indexer for a given namespace and name.
func (s aPIManagerNamespaceLister) Get(name string) (*v1alpha1.APIManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apimanager"), name)
	}
	return obj.(*v1alpha1.APIManager), nil
}
